/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/Animated Woman.glb -o src/components/AnimatedWoman.jsx -r public
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame, useGraph } from "@react-three/fiber";
import React, { useEffect, useMemo, useRef, useState } from "react";
import { SkeletonUtils } from "three-stdlib";

export function Player({
           hairColor = "green",
           topColor = "pink",
           bottomColor = "brown",
           id,
           avatarUrl = "https://models.readyplayer.me/6561ae22e552009499534ec9.glb",
           ...props
         }) {
  const position = useMemo(() => props.position, []);
  const avatar = useRef();
  const [path, setPath] = useState();


  const group = useRef();
  const { scene } = useGLTF(avatarUrl);

  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);

  const { animations: walkAnimation } = useGLTF("/animations/M_Walk_001.glb");
  const { animations: danceAnimation } = useGLTF(
      "/animations/M_Dances_001.glb"
  );
  const { animations: idleAnimation } = useGLTF(
      "/animations/M_Standing_Idle_001.glb"
  );

  const { actions } = useAnimations(
      [walkAnimation[0], idleAnimation[0], danceAnimation[0]],
      avatar
  );
  const [animation, setAnimation] = useState("M_Standing_Idle_001");
  const [isDancing, setIsDancing] = useState(false);

  useEffect(() => {
    clone.traverse((child) => {
      if (child.isMesh) {
        child.castShadow = true;
        child.receiveShadow = true;
      }
    });
  }, []);

  useEffect(() => {
    actions[animation].reset().fadeIn(0.32).play();
    return () => actions[animation]?.fadeOut(0.32);
  }, [animation]);

  useEffect(() => {
    function onPlayerDance(value) {
      if (value.id === id) {
        setIsDancing(true);
      }
    }


  }, [id]);

  return (
      <group
          ref={group}
          {...props}
          position={position}
          dispose={null}
          name={`character-${id}`}
      >
        <primitive object={clone} ref={avatar} />
      </group>
  );
}

// useGLTF.preload("/models/Animated Woman.glb");
useGLTF.preload("/animations/M_Walk_001.glb");
useGLTF.preload("/animations/M_Standing_Idle_001.glb");
useGLTF.preload("/animations/M_Dances_001.glb");