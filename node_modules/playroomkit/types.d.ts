export interface InitOptions {
  streamMode?: boolean;
  allowGamepads?: boolean;
  baseUrl?: string;
  enableBots?: boolean;
  botOptions?: BotOptions;
  avatars?: string[];
  roomCode?: string;
  skipLobby?: boolean;
}

export interface Color {
  r: number;
  g: number;
  b: number;
  hexString: string;
  hex: number;
}

export interface PlayerProfile {
  name: string;
  color: Color;
  photo: string;
  avatarIndex: number;
}

export interface PlayerState {
  id: string;
  getProfile(): PlayerProfile;
  getState(key: string): any;
  setState(key: string, value: any, reliable?: boolean): void;
  onQuit(callback: () => void): void;
}

interface BotSpecs {
  gamma: number;
  epsilon: number;
  alpha: number;
  experience_add_every: number;
  experience_size: number;
  learning_steps_per_iteration: number;
  tderror_clamp: number;
  num_hidden_units: number;
}

interface BotOptions {
  botClass: new (...args: any[]) => Bot;
  botParams?: Object;
  trainingMode?: boolean;
}

export interface Bot {
  id: string;
  getProfile(): PlayerProfile;
  getState(key: string): any;
  setState(key: string, value: any, reliable?: boolean): void;
  onQuit(callback: () => void): void;
}

export interface JoystickOptions {
  type: "dpad" | "angular";
  buttons?: ButtonOptions[];
  zones?: ZoneOptions;
}

export interface ButtonOptions {
  id: string;
  label?: string;
  icon?: string;
}

export interface ZoneOptions {
  up?: ButtonOptions;
  down?: ButtonOptions;
  left?: ButtonOptions;
  right?: ButtonOptions;
}

export interface Joystick {
  isPressed(id: string): boolean;
  isJoystickPressed(): boolean;
  angle(): number;
  dpad(): { x: "left" | "right"; y: "up" | "down" };
  destroy(): void;
}

export declare function getRoomCode(): string | undefined;
export declare function insertCoin(options?: InitOptions): Promise<void>;
export declare function getState(key: string): any;
export declare function setState(
  key: string,
  value: any,
  reliable?: boolean
): void;
export declare function onPlayerJoin(
  callback: (player: PlayerState) => void
): void;
export declare function isHost(): boolean;
export declare function isStreamScreen(): boolean;
export declare function myPlayer(): PlayerState;
export declare function me(): PlayerState;
export declare function waitForState(stateKey: string): Promise<any>;
export declare function waitForPlayerState<T>(
  player: PlayerState,
  stateKey: string
): Promise<T>;
export declare class Joystick {
  constructor(state: PlayerState, options: JoystickOptions);
}
export declare class Bot {
  constructor(botParams: Object);
}

// REACT HOOKS

type SetStateFunction = (value: any, reliable?: boolean) => void;

type MultiplayerStateHookResult = [any, SetStateFunction];

export declare function useMultiplayerState(
  key: string,
  defaultValue: any
): MultiplayerStateHookResult;

export declare function usePlayersList(
  triggerOnPlayerStateChange?: boolean
): PlayerState[];

interface PlayerStateWithValue {
  player: PlayerState;
  state: any;
}

export declare function usePlayersState(key: string): PlayerStateWithValue[];

export declare function useIsHost(): boolean;
